name: Build and Deploy to Elastic Beanstalk (Production)

on:
  push:
    branches: [ master ]
  workflow_dispatch:
  # Manual trigger with approval

env:
  DOTNET_VERSION: '9.0.200'
  SOLUTION_PATH: 'API/StainManager.WebAPI/StainManager.WebAPI.csproj'
  ARTIFACT_NAME: 'stainmanager-webapi-prod'
  EB_APPLICATION_NAME: 'StainManager'
  EB_ENVIRONMENT_NAME: 'StainManager-prod'
  AWS_REGION: 'us-east-2'
  # Update the region as needed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Verify .NET installation
        run: dotnet --info

      - name: Install EF Core tools
        run: |
          dotnet new tool-manifest --force
          dotnet tool install --local dotnet-ef
          dotnet tool restore ${{ env.SOLUTION_PATH }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Test
        run: |
          # Find and run all test projects
          for testProject in $(find . -name "*.Tests.csproj" -o -name "*Tests.csproj"); do
            echo "Running tests for: $testProject"
            dotnet test $testProject --configuration Release --no-build --verbosity normal
          done

      - name: Publish
        run: dotnet publish ${{ env.SOLUTION_PATH }} --configuration Release --output ./publish --no-build

      - name: Generate deployment package
        run: |
          cd publish
          zip -r deploy.zip ./*
          cd ..
          mv publish/deploy.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: deploy.zip
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production  # Requires approval
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./deploy-package/

      - name: Prepare Elastic Beanstalk Configuration
        run: |
          mkdir -p ./deploy-package/.ebextensions
          cp API/StainManager.WebAPI/.ebextensions/prod/config.yml ./deploy-package/.ebextensions/config.yml
          
          # Replace placeholder with actual environment variable reference
          sed -i 's/${PROD_CONN_STRING}/${{ secrets.PROD_DB_CONNECTION_STRING }}/g' ./deploy-package/.ebextensions/config.yml
          
          # Re-zip the deployment package with configuration
          cd ./deploy-package
          unzip -q deploy.zip -d ./contents
          cp -r .ebextensions ./contents/
          cd ./contents
          zip -r ../updated-deploy.zip *
          cd ..
          mv updated-deploy.zip ../deploy.zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          version_label: prod-${{ github.run_number }}-${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: deploy.zip
          use_existing_version_if_available: true
          wait_for_deployment: true
          wait_for_environment_recovery: 300

      - name: Apply database migrations
        env:
          CONNECTION_STRING: ${{ secrets.PROD_DB_CONNECTION_STRING }}
        run: |
          # Install EF Core tools
          dotnet tool install --global dotnet-ef
          
          # Clone repository to get the DbContext project
          git clone https://github.com/${{ github.repository }}.git repo
          cd repo
          
          # Navigate to the right project directory
          cd API/StainManager.Infrastructure
          
          # Apply migrations
          dotnet ef database update --connection "$CONNECTION_STRING" --startup-project ../StainManager.WebAPI