name: Build and Deploy to Elastic Beanstalk (Dev)

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

env:
  DOTNET_VERSION: '9.0.200'
  API_PROJECT_PATH: 'API/StainManager.WebAPI/StainManager.WebAPI.csproj'
  API_ARTIFACT_NAME: 'stainmanager-webapi-dev'
  API_EB_APPLICATION_NAME: 'StainManager'
  API_EB_ENVIRONMENT_NAME: 'StainManager-API-dev'
  UI_PROJECT_PATH: 'Client/StainManager.Blazor.WebUI.Server/StainManager.Blazor.WebUI.Server.csproj'
  UI_ARTIFACT_NAME: 'stainmanager-ui-dev'
  UI_EB_APPLICATION_NAME: 'StainManager'
  UI_EB_ENVIRONMENT_NAME: 'StainManager-UI-dev'
  AWS_REGION: 'us-east-2'

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Verify .NET installation
        run: dotnet --info
      
      - name: Install EF Core tools
        run: |
          dotnet new tool-manifest --force
          dotnet tool install --local dotnet-ef
          dotnet tool restore
          
      - name: Restore dependencies
        run: dotnet restore ${{ env.API_PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore

      - name: Test
        run: |
          # Find and run all test projects
          for testProject in $(find . -name "*.Tests.csproj" -o -name "*Tests.csproj"); do
            echo "Running tests for: $testProject"
            dotnet test $testProject --configuration Release --no-build --verbosity normal
          done

      - name: Publish
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --output ./api-publish --no-build

      - name: Generate deployment package
        run: |
          cd api-publish
          zip -r api-deploy.zip ./*
          cd ..
          mv api-publish/api-deploy.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: api-deploy.zip
          retention-days: 1

  deploy-api:
    needs: build-api
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ./api-deploy-package/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.API_EB_APPLICATION_NAME }}
          environment_name: ${{ env.API_EB_ENVIRONMENT_NAME }}
          version_label: dev-${{ github.run_number }}-${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ./api-deploy-package/ui-deploy.zip
          use_existing_version_if_available: true
          wait_for_deployment: true
          wait_for_environment_recovery: 300

      - name: Setup .NET for migrations
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Get GitHub Actions IP
        id: github-ip
        run: |
          # Get the current runner's outbound IP
          GITHUB_RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "ip=$GITHUB_RUNNER_IP" >> $GITHUB_OUTPUT
          echo "GitHub Actions runner IP: $GITHUB_RUNNER_IP"

      - name: Update RDS Security Group
        run: |
          # Get the runner's IP address
          GITHUB_RUNNER_IP="${{ steps.github-ip.outputs.ip }}"

          # Define the security group ID for your RDS instance
          SECURITY_GROUP_ID="sg-01f87b3b9607f2c7a"

          # Add an inbound rule to the security group for the current runner's IP
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 1433 \
            --cidr "$GITHUB_RUNNER_IP/32"

          echo "Added $GITHUB_RUNNER_IP to RDS security group $SECURITY_GROUP_ID"

      - name: Apply database migrations
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DEV_DB_CONNECTION_STRING }}
        run: |
          # Install EF Core tools locally to avoid conflicts with global.json
          dotnet new tool-manifest --force
          dotnet tool install --local dotnet-ef
          dotnet tool restore
          
          # Navigate to the right project directory
          cd API/StainManager.Infrastructure
          
          # Apply migrations using the local tool with explicit connection string
          dotnet ef database update --startup-project ../StainManager.WebAPI
          
          # Verify migration success
          if [ $? -eq 0 ]; then
            echo "Database migrations applied successfully"
          else
            echo "Database migration failed"
            exit 1
          fi

      - name: Remove temporary security group rule
        if: always() # Run this step even if previous steps fail
        run: |
          GITHUB_RUNNER_IP="${{ steps.github-ip.outputs.ip }}"
          SECURITY_GROUP_ID="sg-01f87b3b9607f2c7a" # Same as above
      
          aws ec2 revoke-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 1433 \
            --cidr "$GITHUB_RUNNER_IP/32"
      
          echo "Removed temporary access for $GITHUB_RUNNER_IP from security group"
          
          
          
  build-ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.UI_PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.UI_PROJECT_PATH }} --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ${{ env.UI_PROJECT_PATH }} --configuration Release --output ./ui-publish

      - name: Generate deployment package
        run: |
          cd ui-publish
          zip -r ui-deploy.zip ./*
          cd ..
          mv ui-publish/ui-deploy.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UI_ARTIFACT_NAME }}
          path: ui-deploy.zip
          retention-days: 1

  deploy-ui:
    needs: [ deploy-api, build-ui ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.UI_ARTIFACT_NAME }}
          path: ./ui-deploy-package/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy UI to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.UI_EB_APPLICATION_NAME }}
          environment_name: ${{ env.UI_EB_ENVIRONMENT_NAME }}
          version_label: ui-dev-${{ github.run_number }}-${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ./ui-deploy-package/ui-deploy.zip
          use_existing_version_if_available: true
          wait_for_deployment: true
          wait_for_environment_recovery: 300