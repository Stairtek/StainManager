@using StainManager.Blazor.WebUI.Server.Common.Models
@using StainManager.Blazor.WebUI.Server.Features.Species.Models
@using StainManager.Blazor.WebUI.Server.Features.Species.Services

@inject ISpeciesService SpeciesService
@inject ITempImageService TempImageService

<MudForm
    Model="@_species"
    @ref="_form"
    Validation="@(_validator.ValidateValue)"
    ValidationDelay="0">

    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon
                    Icon="@(IsNew ? Icons.Material.Filled.AddCircle : Icons.Material.Filled.Edit)"
                    Class="mr-3 mb-n1"/>
                @(IsNew ? "Add" : "Edit") Species
            </MudText>
        </TitleContent>

        <DialogContent>
            <MudGrid>
                <MudItem xs="6" Style="padding-top: 12px;">
                    <MudTextField
                        Label="Name"
                        @bind-Value="_species.Name"
                        For="@(() => _species.Name)"
                        Immediate="true"/>

                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField
                                Label="Abbreviation"
                                @bind-Value="_species.Abbreviation"
                                For="@(() => _species.Abbreviation)"
                                Class="mt-3"
                                Immediate="true"/>
                        </MudItem>

                        <MudItem xs="6">
                            <MudSwitch
                                Label="Is Production Species"
                                @bind-Value="_species.IsProduction"
                                For="@(() => _species.IsProduction)"
                                LabelPlacement="Placement.Start"
                                Color="Color.Success"
                                UncheckedColor="Color.Warning"
                                Class="justify-end"
                                Style="height: 100%"/>
                        </MudItem>
                    </MudGrid>

                    <MudTextField
                        Label="Scientific Name"
                        @bind-Value="_species.ScientificName"
                        For="@(() => _species.ScientificName)"
                        Class="mt-3"
                        Immediate="true"/>

                    <MudTextField
                        Label="Country of Origin"
                        @bind-Value="_species.CountryOfOrigin"
                        For="@(() => _species.CountryOfOrigin)"
                        Class="mt-3"
                        Immediate="true"/>

                    <MudTextField
                        Label="Janka Hardness"
                        @bind-Value="_species.JankaHardness"
                        For="@(() => _species.JankaHardness)"
                        Class="mt-3"
                        Immediate="true"/>
                </MudItem>

                <MudItem xs="6">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudFileUpload
                                T="IBrowserFile"
                                FilesChanged="UploadImage"
                                Accept=".png, .jpg, .jpeg">
                                <ActivatorContent>
                                    <MudButton
                                        Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Upload Image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                        </MudItem>
                        
                        <MudItem 
                            xs="6"
                            Class="d-flex align-center justify-end">
                            <MudPaper
                                Elevation="0">
                                <MudLink
                                    OnClick="ConfigureImage">
                                    Configure Image
                                </MudLink>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                    
                    @if (_species.FullImageLocation is not null)
                    {
                        <MudImage
                            Src="@_species.FullImageLocation"
                            Alt="Species Image"
                            Class="mt-3 rounded-lg"
                            Style="width:100%"
                            Elevation="25"/>
                    }
                </MudItem>
            </MudGrid>
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                Disabled="!_speciesLoaded"
                OnClick="@(async () => await Submit())">
                Save
            </MudButton>
        </DialogActions>

    </MudDialog>

    <MudOverlay Visible="_isLoading" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
    </MudOverlay>
</MudForm>

@code {

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int? Id { get; set; }

    private bool IsNew => Id is null or 0;


    private SpeciesModel _species = new();
    private MudForm _form = null!;
    private readonly SpeciesFluentValidator _validator = new();
    private bool _isLoading;
    private bool _speciesLoaded;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSpecies();
            StateHasChanged();
        }
    }

    private async Task LoadSpecies()
    {
        if (Id is null or 0) return;

        _isLoading = true;
        var result = await SpeciesService.GetSpeciesByIdAsync(Id.Value);
        _isLoading = false;

        if (result is { Failure: true } || result.Value is null)
        {
            Snackbar.Add(result.GetErrorMessage("Failed to load species"), Severity.Error);
            return;
        }

        _species = result.Value;
        _speciesLoaded = true;
    }

    <!--#region Image-->
    private async Task UploadImage(IBrowserFile? file)
    {
        var imageValidationResult = TempImageService.ValidateImage(file);
        
        if (!imageValidationResult.IsValid)
        {
            Snackbar.Add(imageValidationResult.ErrorMessage, Severity.Error);
            return;
        }

        _isLoading = true;
        var image = await TempImageService.GetImageFromBrowserFileAsync(file!);
        var result = await TempImageService.UploadTempImageAsync(image!);
        _isLoading = false;
    
        if (result.Value is null || result.Failure)
        {
            Snackbar.Add(result.GetErrorMessage("Failed to upload image"), Severity.Error);
            return;
        }
        
        _species.FullImageLocation = result.Value.FullImageURL;
        _species.ThumbnailImageLocation = result.Value.ThumbnailImageURL;
    }

    private async Task ConfigureImage()
    {
        if (_species.FullImageLocation is null)
        {
            Snackbar.Add("No image to edit", Severity.Error);
            return;
        }
        
        var parameters = new DialogParameters<ImageEditorDialog>
        {
            { c => c.FullImageLocation, _species.FullImageLocation },
            { c => c.OnImageConfiguredAsync, OnImageConfiguredAsync }
        };
        var options = new DialogOptions
        {
            Position = DialogPosition.TopCenter,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };
        
        var dialog = await DialogService.ShowAsync<ImageEditorDialog>(
            "Configure Image", 
            parameters,
            options);
        
        await dialog.Result;
    }

    private async Task<bool> OnImageConfiguredAsync(ImageConfigurationModel imageConfigurationModel)
    {
        _isLoading = true;
        var uploadResult = await TempImageService.UploadTempImageAsync(imageConfigurationModel);
        _isLoading = false;
        
        if (uploadResult.Failure || uploadResult.Value == null)
        {
            Snackbar.Add(uploadResult.GetErrorMessage("Failed to upload image"), Severity.Error);
            return false;
        }
        
        _species.FullImageLocation = uploadResult.Value.FullImageURL;
        _species.ThumbnailImageLocation = uploadResult.Value.ThumbnailImageURL;

        return true;
    }
    <!--#endregion Image-->

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        Result<SpeciesModel>? result;

        _isLoading = true;
        
        if (Id is null or 0)
            result = await SpeciesService.CreateSpeciesAsync(_species);
        else
            result = await SpeciesService.UpdateSpeciesAsync(_species);

        _isLoading = false;
        
        if (result is { Failure: true })
        {
            var failedMessage = $"Failed to {(Id is null or 0 ? "add" : "update")} species";
            Snackbar.Add(result.GetErrorMessage(failedMessage), Severity.Error);
            return;
        }

        var successMessage = $"{_species.Name} " + (Id is null or 0 ? "added" : "updated");
        Snackbar.Add(successMessage, Severity.Success);

        MudDialog.Close(DialogResult.Ok(true));
    }

}