@page "/textures"

@using StainManager.Blazor.WebUI.Server.Features.Textures.Models
@using StainManager.Blazor.WebUI.Server.Features.Textures.Services

@inject ITexturesService TexturesService

<MudDataGrid
    @ref="_dataGrid"
    T="TextureManagementModel"
    ServerData="LoadTextures"
    Hover="true"
    Striped="true"
    ColumnResizeMode="ResizeMode.Column"
    Filterable="true"
    FilterMode="DataGridFilterMode.Simple"
    Elevation="3">
    <ToolBarContent>
        <MudGrid>
            <!--#region Header & Search-->
            <MudItem xs="4">
                <MudPaper
                    Class="d-flex align-center"
                    Style="height: 48px"
                    Elevation="0">

                    <MudText Typo="Typo.h6">Textures</MudText>

                    <MudTextField
                        T="string"
                        Value="@_searchQuery"
                        ValueChanged="OnSearch"
                        Immediate="true"
                        Placeholder="Search"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search"
                        IconSize="Size.Medium"
                        Class="ml-5"/>
                </MudPaper>
            </MudItem>
            <!--#endregion Header & Search-->
            
            <MudItem xs="6"/>
            
            <!--#region Header Actions-->
            <MudItem xs="2">
                <MudPaper
                    Elevation="0"
                    Class="d-flex justify-end align-center">
                    <MudTooltip Text="@(_showDeleted ? "Hide Deleted" : "Show Deleted")">
                        <MudIconButton
                            Icon="@(_showDeleted ? Icons.Material.Filled.RemoveRedEye : Icons.Material.Outlined.RemoveRedEye)"
                            Color="@(_showDeleted ? Color.Error : Color.Default)"
                            OnClick="OnToggleShowDeleted"/>
                    </MudTooltip>

                    <MudTooltip Text="Reset">
                        <MudIconButton Icon="@Icons.Material.Filled.Loop" Color="Color.Default" OnClick="OnReset"/>
                    </MudTooltip>

                    <MudTooltip Text="Refresh">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="OnRefresh"/>
                    </MudTooltip>

                    <MudTooltip Text="Add New Species">
                        <MudIconButton
                            Icon="@Icons.Material.Filled.AddCircle"
                            Color="Color.Default"
                            OnClick="() => OpenTextureDialog()"/>
                    </MudTooltip>
                </MudPaper>
            </MudItem>
            <!--#endregion Header Actions-->
        </MudGrid>
    </ToolBarContent>

    <NoRecordsContent>
        <MudText Typo="Typo.h6">No Textures Found</MudText>
    </NoRecordsContent>

    <Columns>
        <!--#region Edit-->
        <TemplateColumn
            Title="Edit"
            CellStyle="width: 75px"
            Filterable="false">
            <CellTemplate>
                @if (!_showDeleted)
                {
                    <MudTooltip Text="Edit Species">
                        <MudFab
                            Color="Color.Secondary"
                            StartIcon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            OnClick="() => OpenTextureDialog(context.Item.Id)"/>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Edit-->

        <PropertyColumn
            Property="c => c.Name"
            Filterable="true"/>

        <!--#region Delete/Restore-->
        <TemplateColumn
            Title="Delete"
            CellStyle="width: 75px"
            Filterable="false">
            <CellTemplate>
                <MudTooltip Text="Delete Species">
                    <MudFab
                        Color="@(_showDeleted ? Color.Success : Color.Error)"
                        StartIcon="@(_showDeleted ? Icons.Material.Filled.RestoreFromTrash : Icons.Material.Filled.Delete)"
                        Size="Size.Small"
                        OnClick="async () =>
                        {
                            if (!_showDeleted)
                                await OpenDeleteTextureDialog(context.Item.Id);
                            else
                                await RestoreTexture(context.Item.Id);
                        }"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Delete/Restore-->
    </Columns>

    <PagerContent>
        <MudDataGridPager T="TextureManagementModel"/>
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<TextureManagementModel> _dataGrid = null!;
    private bool _showDeleted;
    private string _searchQuery = string.Empty;
    
    private async Task<GridData<TextureManagementModel>> LoadTextures(
        GridState<TextureManagementModel> state)
    {
        var texturesManagement = await TexturesService.GetTexturesManagementAsync(
            _searchQuery,
            state.Page + 1, // 0-based index
            state.PageSize,
            _showDeleted,
            state.SortDefinitions.FirstOrDefault(),
            state.FilterDefinitions);

        if (texturesManagement.Failure)
        {
            Snackbar.Add(texturesManagement.GetErrorMessage("Failed to load textures"), Severity.Error);
            return new GridData<TextureManagementModel>();
        }

        return new GridData<TextureManagementModel>
        {
            TotalItems = texturesManagement.Value?.TotalCount ?? 0,
            Items = texturesManagement.Value?.Items ?? []
        };
    }

    <!--#region Toolbar Actions-->
    private Task OnSearch(string searchText)
    {
        _searchQuery = searchText;
        _dataGrid.ReloadServerData();
        return Task.CompletedTask;
    }

    private Task OnReset()
    {
        _searchQuery = string.Empty;
        _showDeleted = false;
        _dataGrid.ClearFiltersAsync();
        _dataGrid.ReloadServerData();

        return Task.CompletedTask;
    }

    private Task OnRefresh()
    {
        _dataGrid.ReloadServerData();
        return Task.CompletedTask;
    }

    private Task OnToggleShowDeleted()
    {
        _showDeleted = !_showDeleted;
        _dataGrid.ReloadServerData();
        return Task.CompletedTask;
    }
    <!--#endregion Toolbar Actions-->

    <!--#region Row Actions-->
    private async Task OpenTextureDialog(int? id = null)
    {
        
    }

    private async Task OpenDeleteTextureDialog(int textureId)
    {
        
    }

    private async Task RestoreTexture(int textureId)
    {
        var result = await TexturesService.RestoreTextureAsync(textureId);
        
        if (result is { Failure: true })
        {
            Snackbar.Add(result.GetErrorMessage("Failed to restore texture"), Severity.Error);
            return;
        }

        await _dataGrid.ReloadServerData();
    }
    <!--#endregion Row Actions-->
}