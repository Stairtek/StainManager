version: 0.2

env:
  variables:
    ASPNETCORE_ENVIRONMENT: "Development"
  secrets-manager:
    CONNECTION_STRING: "StainManager/Dev/ConnectionString:ConnectionString"

phases:
  install:
    commands:
      - echo Installing .NET 9.0.200...
      - wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
      - chmod +x dotnet-install.sh
      - ./dotnet-install.sh --version 9.0.200 --install-dir /usr/share/dotnet
      - export PATH="/usr/share/dotnet:$PATH"
      - dotnet --info
      - dotnet tool install --global dotnet-ef
      - export PATH="$HOME/.dotnet/tools:$PATH"
      - dotnet ef --version
  
  pre_build:
    commands:
      - cd API
      - echo Restoring NuGet packages...
      - dotnet restore StainManager.WebAPI/StainManager.WebAPI.csproj
  
  build:
    commands:
      - echo Building the WebAPI application...
      - dotnet build StainManager.WebAPI/StainManager.WebAPI.csproj --configuration Release --no-restore
      
      # Generate migration scripts
      - echo Generating EF Core migration scripts...
      - dotnet ef migrations script --idempotent --output ../db-migrations.sql --project StainManager.Infrastructure/StainManager.Infrastructure.csproj --startup-project StainManager.WebAPI/StainManager.WebAPI.csproj

      - echo Publishing the WebAPI application...
      - dotnet publish StainManager.WebAPI/StainManager.WebAPI.csproj --configuration Release --no-build --output ../publish
      - ls -la ../publish # List files to verify output
      - find ../publish -name "*.runtimeconfig.json" # Verify .runtimeconfig.json exists

  post_build:
    commands:
      - echo Build completed on `date`
      
      # Create Elastic Beanstalk deployment package
      - cd ../publish
      
      # Create Procfile for Elastic Beanstalk
      - echo "web: dotnet StainManager.WebAPI.dll" > Procfile
      
      # Create .ebextensions for configuration
      - mkdir -p .ebextensions
      
      # Create configuration files to set environment variables
      - |
        cat > .ebextensions/01-environment.config << 'EOL'
        option_settings:
          aws:elasticbeanstalk:application:environment:
            ASPNETCORE_ENVIRONMENT: Development
        EOL
      
      # Create a configuration file to retrieve secrets
      - |
        cat > .ebextensions/02-secrets.config << 'EOL'
        files:
          "/opt/elasticbeanstalk/hooks/appdeploy/pre/01_set_secrets.sh":
            mode: "000755"
            owner: root
            group: root
            content: |
              #!/bin/bash
              # Get connection string from Secrets Manager
              CONNECTION_STRING=$(aws secretsmanager get-secret-value --secret-id StainManager/Dev/ConnectionString --query SecretString --output text | jq -r '.ConnectionString')
        
              # Write to environment variables file
              echo "export ConnectionStrings__DefaultConnection=\"$CONNECTION_STRING\"" >> /opt/elasticbeanstalk/deployment/env
        EOL
      
      # Create a configuration file to run database migrations during deployment
      - |
        cat > .ebextensions/03-dbmigration.config << 'EOL'
        files:
          "/opt/elasticbeanstalk/hooks/appdeploy/post/01_run_migrations.sh":
            mode: "000755"
            owner: root
            group: root
            content: |
              #!/bin/bash
              # Install EF Core tools if not available
              if ! command -v dotnet-ef &> /dev/null; then
                dotnet tool install --global dotnet-ef
              fi
        
              # Set path to include .NET tools
              export PATH="$HOME/.dotnet/tools:$PATH"
        
              # Navigate to application directory
              cd /var/app/current
        
              # Apply migrations
              CONNECTION_STRING=$(aws secretsmanager get-secret-value --secret-id StainManager/Dev/ConnectionString --query SecretString --output text | jq -r '.ConnectionString')
              export ConnectionStrings__DefaultConnection="$CONNECTION_STRING"
              export ASPNETCORE_ENVIRONMENT=Development
        
              # Log migration attempt
              echo "Running database migrations..." >> /var/log/eb-migration.log
        
              # Copy migration SQL script to a temp file
              cp db-migrations.sql /tmp/db-migrations.sql
        
              # Use the SQL script or EF Core command to apply migrations
              # For safety, we're using dotnet ef in this example
              dotnet ef database update --project StainManager.Infrastructure.dll --startup-project StainManager.WebAPI.dll >> /var/log/eb-migration.log 2>&1
        EOL
      
      # Create a configuration file to install dependencies
      - |
        cat > .ebextensions/00-install-dependencies.config << 'EOL'
        packages:
          yum:
            jq: []
        EOL
      
      # We don't need to create a zip file - EB will package the files correctly
      - cd ..

artifacts:
  files:
    - publish/**/*
    - publish/*.runtimeconfig.json # Explicitly include runtimeconfig file
  base-directory: '.'
  discard-paths: no

cache:
  paths:
    - '/root/.nuget/packages/**/*'
    - '/root/.dotnet/tools/**/*'