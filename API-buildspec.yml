version: 0.2

env:
  variables:
    ASPNETCORE_ENVIRONMENT: "Development"
  secrets-manager:
    CONNECTION_STRING: "StainManager/Dev/ConnectionString:ConnectionString"

phases:
  install:
    commands:
      - echo Installing .NET 9.0.200...
      - wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
      - chmod +x dotnet-install.sh
      - ./dotnet-install.sh --version 9.0.200 --install-dir /usr/share/dotnet
      - export PATH="/usr/share/dotnet:$PATH"
      - dotnet --info
      - dotnet tool install --global dotnet-ef
      - export PATH="$HOME/.dotnet/tools:$PATH"
      - dotnet ef --version
  
  pre_build:
    commands:
      - cd API
      - echo Restoring NuGet packages...
      - dotnet restore StainManager.WebAPI/StainManager.WebAPI.csproj
  
  build:
    commands:
      - echo Building the WebAPI application...
      - dotnet build StainManager.WebAPI/StainManager.WebAPI.csproj --configuration Release --no-restore
      
      # Generate migration scripts
      - echo Generating EF Core migration scripts...
      - dotnet ef migrations script --idempotent --output ../db-migrations.sql --project StainManager.Infrastructure/StainManager.Infrastructure.csproj --startup-project StainManager.WebAPI/StainManager.WebAPI.csproj

      - echo Publishing the WebAPI application...
      - dotnet publish StainManager.WebAPI/StainManager.WebAPI.csproj --configuration Release --self-contained false --output ../publish
      - ls -la ../publish
      - find ../publish -name "*.runtimeconfig.json"

  post_build:
    commands:
      - echo Build completed on `date`
      - cd ../publish
      
      # Create Procfile for Elastic Beanstalk
      - echo "web: dotnet StainManager.WebAPI.dll" > Procfile
      
      # Create .ebextensions for configuration
      - mkdir -p .ebextensions
      
      # Create AWS EB configuration files
      - |
        cat > .ebextensions/01-environment.config << 'EOL'
        option_settings:
          aws:elasticbeanstalk:application:environment:
            ASPNETCORE_ENVIRONMENT: Development
        EOL

      - |
        cat > .ebextensions/02-secrets.config << 'EOL'
        files:
          "/opt/elasticbeanstalk/hooks/appdeploy/pre/01_set_secrets.sh":
            mode: "000755"
            owner: root
            group: root
            content: |
              #!/bin/bash
              CONNECTION_STRING=$(aws secretsmanager get-secret-value --secret-id StainManager/Dev/ConnectionString --query SecretString --output text | jq -r '.ConnectionString')
              echo "export ConnectionStrings__DefaultConnection=\"$CONNECTION_STRING\"" >> /opt/elasticbeanstalk/deployment/env
        EOL

      - |
        cat > .ebextensions/03-dbmigration.config << 'EOL'
        files:
          "/opt/elasticbeanstalk/hooks/appdeploy/post/01_run_migrations.sh":
            mode: "000755"
            owner: root
            group: root
            content: |
              #!/bin/bash
              if ! command -v dotnet-ef &> /dev/null; then
                dotnet tool install --global dotnet-ef
              fi
              export PATH="$HOME/.dotnet/tools:$PATH"
              cd /var/app/current
              CONNECTION_STRING=$(aws secretsmanager get-secret-value --secret-id StainManager/Dev/ConnectionString --query SecretString --output text | jq -r '.ConnectionString')
              export ConnectionStrings__DefaultConnection="$CONNECTION_STRING"
              export ASPNETCORE_ENVIRONMENT=Development
              echo "Running database migrations..." >> /var/log/eb-migration.log
              dotnet ef database update --project StainManager.Infrastructure.dll --startup-project StainManager.WebAPI.dll >> /var/log/eb-migration.log 2>&1
        EOL

      - |
        cat > .ebextensions/00-install-dependencies.config << 'EOL'
        packages:
          yum:
            jq: []
        EOL
      
      # Create aws-windows-deployment-manifest.json for .NET detection
      - |
        cat > aws-windows-deployment-manifest.json << 'EOL'
        {
          "manifestVersion": 1,
          "deployments": {
            "aspNetCoreWeb": [
              {
                "name": "stainmanager-api",
                "parameters": {
                  "appBundle": ".",
                  "iisPath": "/",
                  "iisWebSite": "Default Web Site"
                }
              }
            ]
          }
        }
        EOL
      
      # Create a manifest file to ensure proper deployment
      - |
        cat > .platform/nginx/conf.d/elasticbeanstalk/00_application.conf << 'EOL'
        location / {
            proxy_pass http://localhost:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection keep-alive;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        EOL
      
      # Create a custom startup script
      - mkdir -p .platform/hooks/prebuild
      - |
        cat > .platform/hooks/prebuild/01_set_env.sh << 'EOL'
        #!/bin/bash
        # Ensure script is executable
        chmod +x /var/app/staging/Procfile
        # Set correct permissions for deployment scripts
        chmod -R 755 /var/app/staging/.platform
        chmod -R 755 /var/app/staging/.ebextensions
        EOL
      - chmod +x .platform/hooks/prebuild/01_set_env.sh
      
      # Create deployment manifest file
      - cd ..
      - echo "Creating deployment bundle..."
      - cd publish
      - zip -r ../deployment-bundle.zip * .[^.]* # Include hidden files

artifacts:
  files:
    - deployment-bundle.zip
  discard-paths: yes

cache:
  paths:
    - '/root/.nuget/packages/**/*'
    - '/root/.dotnet/tools/**/*'