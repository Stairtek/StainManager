@page "/species"
@using StainManager.Blazor.WebUI.Server.Features.Species.Models
@using StainManager.Blazor.WebUI.Server.Features.Species.Services
@using StainManager.Blazor.WebUI.Server.Models

@inject ISpeciesService SpeciesService

<StandardDataGrid
    @ref="_dataGrid"
    TItem="SpeciesManagementModel"
    LoadData="LoadSpecies"
    Settings="@(new StandardDataGridSettings("Species", "Species"))"
    OpenDialog="OpenSpeciesDialog"
    ShowDeletedChanged="OnShowDeletedChanged">
    <GridColumns>
        <!--#region Edit-->
        <TemplateColumn
            T="SpeciesManagementModel"
            Title="Edit"
            CellStyle="width: 75px"
            Filterable="false">
            <CellTemplate>
                @if (!_showDeleted)
                {
                    <MudTooltip Text="Edit Species">
                        <MudFab
                            Color="Color.Secondary"
                            StartIcon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            OnClick="() => OpenSpeciesDialog(context.Item.Id)"/>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Edit-->

        <!--#region Thumbnail-->
        <TemplateColumn
            T="SpeciesManagementModel"
            Title="Thumbnail"
            CellStyle="width: 50px"
            Filterable="false">
            <CellTemplate>
                @{
                    var imageSrc = context.Item.ThumbnailImageLocation ?? "images/Image Coming Soon.jpg";

                    <MudImage
                        Src="@imageSrc"
                        Elevation="25"
                        Class="rounded-lg"
                        Width="75"
                        FallbackSrc="images/Image Coming Soon.jpg"/>
                }
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Thumbnail-->

        <PropertyColumn
            T="SpeciesManagementModel"
            TProperty="string"
            Property="c => c.Name!"
            Filterable="true"/>

        <PropertyColumn
            T="SpeciesManagementModel"
            TProperty="string"
            Property="c => c.Abbreviation!"
            Filterable="true"/>

        <!--#region Production-->
        <TemplateColumn
            T="SpeciesManagementModel"
            Title="Production"
            Filterable="false">
            <CellTemplate>
                <MudChip
                    T="string"
                    Icon="@(context.Item.IsProduction ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)"
                    Color="@(context.Item.IsProduction ? Color.Success : Color.Error)">
                    @(context.Item.IsProduction ? "Production" : "Unavailable")
                </MudChip>
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Production-->

        <!--#region Delete/Restore-->
        <TemplateColumn
            T="SpeciesManagementModel"
            Title="Delete"
            CellStyle="width: 75px"
            Filterable="false">
            <CellTemplate>
                <MudTooltip Text="Delete Species">
                    <MudFab
                        Color="@(_showDeleted ? Color.Success : Color.Error)"
                        StartIcon="@(_showDeleted ? Icons.Material.Filled.RestoreFromTrash : Icons.Material.Filled.Delete)"
                        Size="Size.Small"
                        OnClick="async () =>
                        {
                            if (!_showDeleted)
                                await OpenDeleteSpeciesDialog(context.Item.Id);
                            else
                                await RestoreSpecies(context.Item.Id);
                        }"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Delete/Restore-->
    </GridColumns>
</StandardDataGrid>

@code {
    private StandardDataGrid<SpeciesManagementModel> _dataGrid = null!;
    private bool _showDeleted;

    private async Task<Result<PaginatedList<SpeciesManagementModel>?>?> LoadSpecies(
        GridState<SpeciesManagementModel> state,
        string searchQuery,
        bool showDeleted)
    {
        return await ExceptionHandler.ExecuteAsync(
            async () => await SpeciesService.GetSpeciesManagementAsync(
                searchQuery,
                state.Page + 1, // 0-based index
                state.PageSize,
                showDeleted,
                state.SortDefinitions.FirstOrDefault(),
                state.FilterDefinitions));
    }
    
    private void OnShowDeletedChanged(bool showDeleted)
    {
        _showDeleted = showDeleted;
    }

    private async Task OpenSpeciesDialog(int? id = null)
    {
        var title = id is null
            ? "Add Species"
            : "Edit Species";

        await ExceptionHandler.ExecuteAsync(
            async () =>
            {
                var parameters = new DialogParameters<SpeciesDialog>
                {
                    { c => c.Id, id }
                };
                var options = new DialogOptions
                {
                    Position = DialogPosition.TopCenter,
                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true,
                    CloseButton = true
                };
                var dialog = await DialogService.ShowAsync<SpeciesDialog>(
                    title,
                    parameters,
                    options);
                var result = await dialog.Result;

                if (result is { Canceled: false })
                    await _dataGrid.ReloadData();
            },
            $"Failed to {title.ToLower()}");
    }

    private async Task OpenDeleteSpeciesDialog(int speciesId)
    {
        await ExceptionHandler.ExecuteAsync(
            async () =>
            {
                var parameters = new DialogParameters<DeleteSpeciesDialog>
                {
                    { c => c.Id, speciesId }
                };
                var options = new DialogOptions
                {
                    Position = DialogPosition.TopCenter
                };
                var dialog = await DialogService.ShowAsync<DeleteSpeciesDialog>(
                    "Delete Species",
                    parameters,
                    options);
                var result = await dialog.Result;

                if (result is { Canceled: false })
                    await _dataGrid.ReloadData();
            });
    }

    private async Task RestoreSpecies(int speciesId)
    {
        await ExceptionHandler.ExecuteAsync(
            async () =>
            {
                var result = await SpeciesService.RestoreSpeciesAsync(speciesId);

                if (result is { Failure: true })
                {
                    Snackbar.Add(result.GetErrorMessage("Failed to restore species"), Severity.Error);
                    return;
                }
                
                await _dataGrid.ReloadData();
            });
    }
}