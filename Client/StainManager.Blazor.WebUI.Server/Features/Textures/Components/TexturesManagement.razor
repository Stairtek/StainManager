@page "/textures"
@using StainManager.Blazor.WebUI.Server.Features.Textures.Models
@using StainManager.Blazor.WebUI.Server.Features.Textures.Services
@using StainManager.Blazor.WebUI.Server.Models

@inject ITexturesService TexturesService

<StandardDataGrid
    @ref="_dataGrid"
    TItem="TextureManagementModel"
    LoadData="LoadTextures"
    Settings="@(new StandardDataGridSettings("Textures", "Texture"))"
    OpenDialog="OpenTextureDialog"
    ShowDeletedChanged="OnShowDeletedChanged">
    
    <AdditionalActions>
        <MudTooltip Text="Change Sort">
            <MudIconButton
                Icon="@Icons.Material.Filled.ImportExport"
                Color="Color.Default"
                OnClick="OnChangeSort"/>
        </MudTooltip>
    </AdditionalActions>
    
    <GridColumns>
        <!--#region Edit-->
        <TemplateColumn
            T="TextureManagementModel"
            Title="Edit"
            CellStyle="width: 75px"
            Filterable="false">
            <CellTemplate>
                @if (!_showDeleted)
                {
                    <MudTooltip Text="Edit Species">
                        <MudFab
                            Color="Color.Secondary"
                            StartIcon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            OnClick="() => OpenTextureDialog(context.Item.Id)"/>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Edit-->
        
        <!--#region Thumbnail-->
        <TemplateColumn
            T="TextureManagementModel"
            Title="Thumbnail"
            CellStyle="width: 50px"
            Filterable="false">
            <CellTemplate>
                @{
                    var imageSrc = context.Item.ThumbnailImageLocation ?? "images/Image Coming Soon.jpg";

                    <MudImage
                        Src="@imageSrc"
                        Elevation="25"
                        Class="rounded-lg"
                        Width="75"
                        FallbackSrc="images/Image Coming Soon.jpg"/>
                }
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Thumbnail-->

        <PropertyColumn
            T="TextureManagementModel"
            TProperty="string"
            Property="c => c.Name!"
            Filterable="true"/>

        <!--#region Sort Order-->
        <PropertyColumn
            T="TextureManagementModel"
            TProperty="int"
            Property="c => c.SortOrder"
            Filterable="false"
            Sortable="true"
            CellStyle="width: 165px;"
            Title="Sort Order"/>
        <!--#endregion Sort Order-->

        <!--#region Delete/Restore-->
        <TemplateColumn
            T="TextureManagementModel"
            Title="Delete"
            CellStyle="width: 75px"
            Filterable="false">
            <CellTemplate>
                <MudTooltip Text="Delete Species">
                    <MudFab
                        Color="@(_showDeleted ? Color.Success : Color.Error)"
                        StartIcon="@(_showDeleted ? Icons.Material.Filled.RestoreFromTrash : Icons.Material.Filled.Delete)"
                        Size="Size.Small"
                        OnClick="async () =>
                        {
                            if (!_showDeleted)
                                await OpenDeleteTextureDialog(context.Item.Id);
                            else
                                await RestoreTexture(context.Item.Id);
                        }"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        <!--#endregion Delete/Restore-->
    </GridColumns>

</StandardDataGrid>

@code {
    private StandardDataGrid<TextureManagementModel> _dataGrid = null!;
    private bool _showDeleted;
    
    private async Task<Result<PaginatedList<TextureManagementModel>?>?> LoadTextures(
        GridState<TextureManagementModel> state,
        string searchQuery,
        bool showDeleted)
    {
        return await ExceptionHandler.ExecuteAsync(async () => 
            await TexturesService.GetTexturesManagementAsync(
                searchQuery,
                state.Page + 1, // 0-based index
                state.PageSize,
                showDeleted,
                state.SortDefinitions.FirstOrDefault(),
                state.FilterDefinitions));
    }

    private void OnShowDeletedChanged(bool showDeleted)
    {
        _showDeleted = showDeleted;
    }
    
    <!--#region Change Sort Order-->
    private async Task OnChangeSort()
    {
        await ExceptionHandler.ExecuteAsync(
            async () =>
            {
                var parameters = new DialogParameters<SortOrderDialog>
                {
                    { c => c.GetDropItems, LoadTexturesForSortOrder },
                    { c => c.SaveSortOrder, SaveSortOrder }
                };
                var options = new DialogOptions
                {
                    Position = DialogPosition.TopCenter,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true,
                    CloseButton = true
                };
                var dialog = await DialogService.ShowAsync<SortOrderDialog>(
                    "Change Sort Order",
                    parameters,
                    options);
                
                var result = await dialog.Result;
                
                if (result is { Canceled: false })
                    await _dataGrid.ReloadData();
            },
            "Failed to change sort order");
    }

    private async Task<Result<List<DropItem>?>> LoadTexturesForSortOrder()
    {
        var result = await TexturesService.GetTexturesSummaryAsync();
        
        if (result is { Failure: true } || result.Value is null)
            return Result.Fail<List<DropItem>?>(result.GetErrorMessage("Failed to load textures"));
        
        var dropItems = result.Value?
            .Select(x => new DropItem
            {
                Id = x.Id,
                Name = x.Name,
                SortOrder = x.SortOrder
            })
            .ToList();
        
        return Result.Ok(dropItems);
    }
    
    private async Task<Result> SaveSortOrder(List<DropItem> dropItems)
    {
        var result = await TexturesService.UpdateTexturesSortOrderAsync(dropItems);
        
        return result is { Failure: true } 
            ? Result.Fail(result.GetErrorMessage("Failed to load textures")) 
            : Result.Ok();
    }
    <!--#endregion Change Sort Order-->
    
    private async Task OpenTextureDialog(int? id = null)
    {
        var title = id is null
            ? "Add Texture"
            : "Edit Texture";

        await ExceptionHandler.ExecuteAsync(async () =>
            {
                var parameters = new DialogParameters<TextureDialog>
                {
                    { c => c.Id, id }
                };
                var options = new DialogOptions
                {
                    Position = DialogPosition.TopCenter,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true,
                    CloseButton = true
                };
                var dialog = await DialogService.ShowAsync<TextureDialog>(
                    title,
                    parameters,
                    options);
                var result = await dialog.Result;
                
                if (result is { Canceled: false })
                    await _dataGrid.ReloadData();
            },
            $"Failed to {title.ToLower()}");
    }

    private async Task OpenDeleteTextureDialog(int textureId)
    {
        await ExceptionHandler.ExecuteAsync(async () =>
            {
                var parameters = new DialogParameters<DeleteTextureDialog>
                {
                    { c => c.Id, textureId }
                };
                var options = new DialogOptions
                {
                    Position = DialogPosition.TopCenter,
                    MaxWidth = MaxWidth.ExtraSmall,
                    FullWidth = true,
                    CloseButton = true
                };
                var dialog = await DialogService.ShowAsync<DeleteTextureDialog>(
                    "Delete Texture",
                    parameters,
                    options);
                var result = await dialog.Result;
                
                if (result is { Canceled: false })
                    await _dataGrid.ReloadData();
            });
    }

    private async Task RestoreTexture(int textureId)
    {
        await ExceptionHandler.ExecuteAsync(async () =>
        {
            var result = await TexturesService.RestoreTextureAsync(textureId);

            if (result is { Failure: true })
            {
                Snackbar.Add(result.GetErrorMessage("Failed to restore texture"), Severity.Error);
                return;
            }

            await _dataGrid.ReloadData();
        });
    }
}