@using StainManager.Blazor.WebUI.Server.Features.Textures.Models
@using StainManager.Blazor.WebUI.Server.Features.Textures.Services
@using StainManager.Blazor.WebUI.Server.Models

@inject ITexturesService TexturesService
@inject ITempImageService TempImageService

<MudForm
    Model="@_texture"
    @ref="_form"
    Validation="@(_validator.ValidateValue)"
    ValidationDelay="0">
    
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon
                    Icon="@(IsNew ? Icons.Material.Filled.AddCircle : Icons.Material.Filled.Edit)"
                    Class="mr-3 mb-n1"/>
                @(IsNew ? "Add" : "Edit") Texture
            </MudText>
        </TitleContent>
        
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" Style="padding-top: 12px;">
                    <MudTextField
                        Label="Name"
                        @bind-Value="_texture.Name"
                        For="@(() => _texture.Name)"
                        Immediate="true"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudFileUpload
                                T="IBrowserFile"
                                FilesChanged="UploadImage"
                                Accept=".png, .jpg, .jpeg">
                                <ActivatorContent>
                                    <MudButton
                                        Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Upload Image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                        </MudItem>

                        <MudItem
                            xs="6"
                            Class="d-flex align-center justify-end">
                            <MudPaper
                                Elevation="0">
                                <MudLink
                                    OnClick="ConfigureImage">
                                    Configure Image
                                </MudLink>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    @if (_texture.FullImageLocation is not null)
                    {
                        <MudImage
                            Src="@_texture.FullImageLocation"
                            Alt="Species Image"
                            Class="mt-3 rounded-lg"
                            Style="width:100%"
                            Elevation="25"/>
                    }
                </MudItem>
            </MudGrid>
        </DialogContent>
        
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton
                Color="Color.Primary"
                Variant="Variant.Filled"
                Disabled="!_textureLoaded"
                OnClick="@(async () => await Submit())">
                Save
            </MudButton>
        </DialogActions>
    </MudDialog>

    <MudOverlay Visible="_isLoading" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
    </MudOverlay>
</MudForm>

@code {
    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public int? Id { get; set; }
    
    private bool IsNew => Id is null or 0;
    
    
    private TextureModel _texture = new();
    private MudForm _form = null!;
    private readonly TextureFluentValidator _validator = new();
    private bool _isLoading;
    private bool _textureLoaded;
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTexture();
            StateHasChanged();
        }
    }
    
    private async Task LoadTexture()
    {
        await ExceptionHandler.ExecuteAsync(async () =>
        {
            if (Id is null or 0)
            {
                _textureLoaded = true;
                return;
            }
            
            _isLoading = true;
            var result = await TexturesService.GetTextureByIdAsync(Id.Value);
            _isLoading = false;
            
            if (result is { Failure: true } || result.Value is null)
            {
                Snackbar.Add(result.GetErrorMessage("Failed to load texture"), Severity.Error);
                return;
            }
            
            _texture = result.Value;
            _textureLoaded = true;
        });
    }
    
    <!--#region Image-->
    private async Task UploadImage(IBrowserFile? file)
    {
        await ExceptionHandler.ExecuteAsync(async () =>
        {
            var imageValidationResult = TempImageService.ValidateImage(file);

            if (!imageValidationResult.IsValid)
            {
                Snackbar.Add(imageValidationResult.ErrorMessage, Severity.Error);
                return;
            }
            
            _isLoading = true;
            var image = await TempImageService.GetImageFromBrowserFileAsync(file!);
            var result = await TempImageService.UploadTempImageAsync(image!);
            _isLoading = false;
            
            if (result is { Failure: true } || result.Value is null)
            {
                Snackbar.Add(result.GetErrorMessage("Failed to upload image"), Severity.Error);
                return;
            }
            
            _texture.FullImageLocation = result.Value.FullImageURL;
            _texture.ThumbnailImageLocation = result.Value.ThumbnailImageURL;
        });
    }

    private async Task ConfigureImage()
    {
        await ExceptionHandler.ExecuteAsync(async () =>
        {
            if (_texture.FullImageLocation is null)
            {
                Snackbar.Add("Please upload an image first.", Severity.Warning);
                return;
            }

            var parameters = new DialogParameters<ImageEditorDialog>
            {
                { c => c.FullImageLocation, _texture.FullImageLocation },
                { c => c.OnImageConfiguredAsync, OnImageConfiguredAsync }
            };
            var options = new DialogOptions
            {
                Position = DialogPosition.TopCenter,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true
            };
            
            await DialogService.ShowAsync<ImageEditorDialog>(
                "Configure Image", 
                parameters, 
                options);
        });
    }

    private async Task<bool> OnImageConfiguredAsync(
        ImageConfigurationModel imageConfigurationModel)
    {
        return await ExceptionHandler.ExecuteAsync(async () =>
        {
            _isLoading = true;
            var result = await TempImageService.UploadTempImageAsync(imageConfigurationModel);
            _isLoading = false;
            
            if (result is { Failure: true } || result.Value is null)
            {
                Snackbar.Add(result.GetErrorMessage("Failed to upload image"), Severity.Error);
                return false;
            }
            
            _texture.FullImageLocation = result.Value.FullImageURL;
            _texture.ThumbnailImageLocation = result.Value.ThumbnailImageURL;
            
            return true;
        });
    }
    <!--#endregion Image-->
    
    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await ExceptionHandler.ExecuteAsync(async () =>
        {
            await _form.Validate();
            
            if (!_form.IsValid)
                return;
            
            _isLoading = true;
            
            var result = IsNew
                ? await TexturesService.CreateTextureAsync(_texture)
                : await TexturesService.UpdateTextureAsync(_texture);
            
            _isLoading = false;
            
            if (result is { Failure: true })
            {
                var failedMessage = IsNew
                    ? "Failed to add texture"
                    : "Failed to update texture";
                Snackbar.Add(result.GetErrorMessage(failedMessage), Severity.Error);
                return;
            }
            
            var successMessage = IsNew
                ? $"{_texture.Name} added successfully"
                : $"{_texture.Name} updated successfully";
            Snackbar.Add(successMessage, Severity.Success);
            
            MudDialog.Close(DialogResult.Ok(true));
        });
    }
}